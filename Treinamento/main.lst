CCS PCM C Compiler, Version 5.076, 56587               26-jun-24 07:26

               Filename:   E:\Doc Vitor\Projeto pic em c\Treinamento\main.lst

               ROM used:   723 words (9%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           38 (10%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1D5
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005D:  DATA 50,1D
005E:  DATA 4F,23
005F:  DATA 00,00
0060:  DATA D6,2A
0061:  DATA BA,27
0062:  DATA 46,00
*
011C:  MOVF   0B,W
011D:  MOVWF  34
011E:  BCF    0B.7
011F:  BSF    03.5
0120:  BSF    03.6
0121:  BSF    0C.7
0122:  BSF    0C.0
0123:  NOP
0124:  NOP
0125:  BCF    03.5
0126:  BCF    03.6
0127:  BTFSC  34.7
0128:  BSF    0B.7
0129:  BSF    03.6
012A:  MOVF   0C,W
012B:  ANDLW  7F
012C:  BTFSC  03.2
012D:  GOTO   170
012E:  BCF    03.6
012F:  MOVWF  34
0130:  BSF    03.6
0131:  MOVF   0D,W
0132:  BCF    03.6
0133:  MOVWF  35
0134:  BSF    03.6
0135:  MOVF   0F,W
0136:  BCF    03.6
0137:  MOVWF  36
0138:  MOVF   34,W
0139:  MOVWF  3D
013A:  CALL   0EC
013B:  MOVF   35,W
013C:  BSF    03.6
013D:  MOVWF  0D
013E:  BCF    03.6
013F:  MOVF   36,W
0140:  BSF    03.6
0141:  MOVWF  0F
0142:  BCF    03.6
0143:  MOVF   0B,W
0144:  MOVWF  37
0145:  BCF    0B.7
0146:  BSF    03.5
0147:  BSF    03.6
0148:  BSF    0C.7
0149:  BSF    0C.0
014A:  NOP
014B:  NOP
014C:  BCF    03.5
014D:  BCF    03.6
014E:  BTFSC  37.7
014F:  BSF    0B.7
0150:  BSF    03.6
0151:  RLF    0C,W
0152:  RLF    0E,W
0153:  ANDLW  7F
0154:  BTFSC  03.2
0155:  GOTO   170
0156:  BCF    03.6
0157:  MOVWF  34
0158:  BSF    03.6
0159:  MOVF   0D,W
015A:  BCF    03.6
015B:  MOVWF  35
015C:  BSF    03.6
015D:  MOVF   0F,W
015E:  BCF    03.6
015F:  MOVWF  36
0160:  MOVF   34,W
0161:  MOVWF  3D
0162:  CALL   0EC
0163:  MOVF   35,W
0164:  BSF    03.6
0165:  MOVWF  0D
0166:  BCF    03.6
0167:  MOVF   36,W
0168:  BSF    03.6
0169:  MOVWF  0F
016A:  INCF   0D,F
016B:  BTFSC  03.2
016C:  INCF   0F,F
016D:  BCF    03.6
016E:  GOTO   11C
016F:  BSF    03.6
0170:  BCF    03.6
0171:  RETURN
0172:  CLRF   3C
0173:  MOVF   04,W
0174:  MOVWF  3B
0175:  BCF    3C.0
0176:  BTFSC  03.7
0177:  BSF    3C.0
0178:  SWAPF  35,W
0179:  IORLW  F0
017A:  MOVWF  37
017B:  ADDWF  37,F
017C:  ADDLW  E2
017D:  MOVWF  38
017E:  ADDLW  32
017F:  MOVWF  3A
0180:  MOVF   35,W
0181:  ANDLW  0F
0182:  ADDWF  38,F
0183:  ADDWF  38,F
0184:  ADDWF  3A,F
0185:  ADDLW  E9
0186:  MOVWF  39
0187:  ADDWF  39,F
0188:  ADDWF  39,F
0189:  SWAPF  34,W
018A:  ANDLW  0F
018B:  ADDWF  39,F
018C:  ADDWF  3A,F
018D:  RLF    39,F
018E:  RLF    3A,F
018F:  COMF   3A,F
0190:  RLF    3A,F
0191:  MOVF   34,W
0192:  ANDLW  0F
0193:  ADDWF  3A,F
0194:  RLF    37,F
0195:  MOVLW  07
0196:  MOVWF  36
0197:  MOVLW  0A
0198:  ADDWF  3A,F
0199:  DECF   39,F
019A:  BTFSS  03.0
019B:  GOTO   198
019C:  ADDWF  39,F
019D:  DECF   38,F
019E:  BTFSS  03.0
019F:  GOTO   19C
01A0:  ADDWF  38,F
01A1:  DECF   37,F
01A2:  BTFSS  03.0
01A3:  GOTO   1A0
01A4:  ADDWF  37,F
01A5:  DECF   36,F
01A6:  BTFSS  03.0
01A7:  GOTO   1A4
01A8:  MOVLW  36
01A9:  MOVWF  04
01AA:  BCF    03.7
01AB:  MOVLW  07
01AC:  ANDWF  3B,W
01AD:  BCF    3B.6
01AE:  ADDWF  04,F
01AF:  MOVLW  3A
01B0:  SUBWF  04,W
01B1:  BTFSC  03.2
01B2:  BSF    3B.6
01B3:  MOVF   00,W
01B4:  MOVWF  77
01B5:  BTFSS  03.2
01B6:  GOTO   1BF
01B7:  BTFSC  3B.6
01B8:  GOTO   1BF
01B9:  BTFSC  3B.4
01BA:  GOTO   1D1
01BB:  BTFSC  3B.3
01BC:  GOTO   1BF
01BD:  MOVLW  20
01BE:  GOTO   1C2
01BF:  BSF    3B.3
01C0:  BCF    3B.4
01C1:  MOVLW  30
01C2:  ADDWF  77,F
01C3:  CLRF   35
01C4:  MOVF   04,W
01C5:  MOVWF  34
01C6:  BCF    35.0
01C7:  BTFSC  03.7
01C8:  BSF    35.0
01C9:  MOVF   77,W
01CA:  MOVWF  3D
01CB:  CALL   0EC
01CC:  MOVF   34,W
01CD:  MOVWF  04
01CE:  BCF    03.7
01CF:  BTFSC  35.0
01D0:  BSF    03.7
01D1:  INCF   04,F
01D2:  BTFSS  3B.6
01D3:  GOTO   1AF
01D4:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(crystal=8MHz) 
*
00B9:  MOVLW  34
00BA:  MOVWF  04
00BB:  BCF    03.7
00BC:  MOVF   00,W
00BD:  BTFSC  03.2
00BE:  GOTO   0CC
00BF:  MOVLW  02
00C0:  MOVWF  78
00C1:  CLRF   77
00C2:  DECFSZ 77,F
00C3:  GOTO   0C2
00C4:  DECFSZ 78,F
00C5:  GOTO   0C1
00C6:  MOVLW  97
00C7:  MOVWF  77
00C8:  DECFSZ 77,F
00C9:  GOTO   0C8
00CA:  DECFSZ 00,F
00CB:  GOTO   0BF
00CC:  RETURN
.................... #use FIXED_IO( A_outputs=PIN_A5) 
.................... #use FIXED_IO( B_outputs=PIN_B2, PIN_B3) 
.................... #define liga   PIN_B0 
.................... #define desliga   PIN_B1 
.................... #define LED   PIN_B3 
.................... #define LEDL  PIN_B2 
.................... #define buzzer    PIN_A5 
....................  
....................  
....................  
....................  
....................  
.................... #include "lcd_8bits.c" 
.................... /*========================================= 
.................... 8-BIT LCD DRIVER FOR PIC16F877A CCSC 
.................... ==========================================*/ 
.................... /////////////////////////////////////////////////////////////////// 
.................... // CCS C Compiler 
.................... // LCD 16x2 
.................... // 
.................... // by Nisar Ahmed 
.................... // 2009/03/27 
.................... ////////////////////////////////////////////////////////////////// 
.................... //#include <16F877.h>                           // PIC16F877 header file 
.................... //#use delay(clock=4000000)                       // for 4Mhz crystal 
.................... //#fuses XT, NOWDT, NOPROTECT, NOLVP              // for debug mode 
....................  
.................... #define PORT_A                  0               // define for function output() 
.................... #define PORT_B                  1 
.................... #define PORT_C                  2 
.................... #define PORT_D                  3 
.................... #define PORT_E                  4 
....................  
.................... #define NCHAR_PER_LINE          16              // max char numbers per line 
.................... #define LCD_RS                  PIN_E0 
.................... #define LCD_RW                  PIN_E2 
.................... #define LCD_E                   PIN_E1 
.................... #define LCD_DAT                 PORT_D 
.................... //===========================================================================// 
.................... //--- output() -----------------///////////////////////////////////////////////  
.................... //lcd data bus output 
.................... void output(int8 port, int8 dat) 
.................... { 
....................         switch(port) 
*
0063:  MOVF   3E,W
0064:  XORLW  00
0065:  BTFSC  03.2
0066:  GOTO   074
0067:  XORLW  01
0068:  BTFSC  03.2
0069:  GOTO   07B
006A:  XORLW  03
006B:  BTFSC  03.2
006C:  GOTO   082
006D:  XORLW  01
006E:  BTFSC  03.2
006F:  GOTO   08A
0070:  XORLW  07
0071:  BTFSC  03.2
0072:  GOTO   090
0073:  GOTO   098
....................                 { 
....................                 case PORT_A: output_a(dat);      break; 
0074:  MOVLW  DF
0075:  BSF    03.5
0076:  MOVWF  05
0077:  BCF    03.5
0078:  MOVF   3F,W
0079:  MOVWF  05
007A:  GOTO   098
....................                 case PORT_B: output_b(dat);      break; 
007B:  MOVLW  F3
007C:  BSF    03.5
007D:  MOVWF  06
007E:  BCF    03.5
007F:  MOVF   3F,W
0080:  MOVWF  06
0081:  GOTO   098
....................                 case PORT_C: output_c(dat);      break; 
0082:  MOVLW  00
0083:  MOVWF  2B
0084:  BSF    03.5
0085:  CLRF   07
0086:  BCF    03.5
0087:  MOVF   3F,W
0088:  MOVWF  07
0089:  GOTO   098
....................                 case PORT_D: output_d(dat);      break; 
008A:  BSF    03.5
008B:  CLRF   08
008C:  BCF    03.5
008D:  MOVF   3F,W
008E:  MOVWF  08
008F:  GOTO   098
....................                 case PORT_E: output_e(dat);      break; 
0090:  BSF    03.5
0091:  BCF    09.0
0092:  BCF    09.1
0093:  BCF    09.2
0094:  BCF    03.5
0095:  MOVF   3F,W
0096:  MOVWF  09
0097:  GOTO   098
....................                 default :       //??? port maybe error! 
....................                         break; 
....................                 } 
0098:  RETURN
.................... }//end output() 
.................... //===========================================================================// 
.................... //--- lcd_write_cmd() -----------//////////////////////////////////////////////  
.................... void lcd_write_cmd(int8 cmd) 
.................... { 
....................    delay_us(40); 
0099:  MOVLW  1A
009A:  MOVWF  77
009B:  DECFSZ 77,F
009C:  GOTO   09B
009D:  NOP
....................    output_low(LCD_RS); 
009E:  BSF    03.5
009F:  BCF    09.0
00A0:  BCF    03.5
00A1:  BCF    09.0
....................    output_low(LCD_RW); 
00A2:  BSF    03.5
00A3:  BCF    09.2
00A4:  BCF    03.5
00A5:  BCF    09.2
....................    output(LCD_DAT, cmd); 
00A6:  MOVLW  03
00A7:  MOVWF  3E
00A8:  MOVF   38,W
00A9:  MOVWF  3F
00AA:  CALL   063
....................     
....................    output_high(LCD_E); 
00AB:  BSF    03.5
00AC:  BCF    09.1
00AD:  BCF    03.5
00AE:  BSF    09.1
....................    delay_us(40); 
00AF:  MOVLW  1A
00B0:  MOVWF  77
00B1:  DECFSZ 77,F
00B2:  GOTO   0B1
00B3:  NOP
....................    output_low(LCD_E); 
00B4:  BSF    03.5
00B5:  BCF    09.1
00B6:  BCF    03.5
00B7:  BCF    09.1
00B8:  RETURN
.................... }//end lcd_write_cmd() 
.................... //===========================================================================// 
.................... //--- lcd_write_dat() ------------/////////////////////////////////////////////  
.................... void lcd_write_dat(int8 dat) 
.................... { 
....................    delay_us(40); 
*
00EC:  MOVLW  1A
00ED:  MOVWF  77
00EE:  DECFSZ 77,F
00EF:  GOTO   0EE
00F0:  NOP
....................    output_high(LCD_RS); 
00F1:  BSF    03.5
00F2:  BCF    09.0
00F3:  BCF    03.5
00F4:  BSF    09.0
....................    output_low(LCD_RW); 
00F5:  BSF    03.5
00F6:  BCF    09.2
00F7:  BCF    03.5
00F8:  BCF    09.2
....................    output(LCD_DAT, dat); 
00F9:  MOVLW  03
00FA:  MOVWF  3E
00FB:  MOVF   3D,W
00FC:  MOVWF  3F
00FD:  CALL   063
....................     
....................    output_high(LCD_E); 
00FE:  BSF    03.5
00FF:  BCF    09.1
0100:  BCF    03.5
0101:  BSF    09.1
....................    delay_us(40); 
0102:  MOVLW  1A
0103:  MOVWF  77
0104:  DECFSZ 77,F
0105:  GOTO   104
0106:  NOP
....................    output_low(LCD_E); 
0107:  BSF    03.5
0108:  BCF    09.1
0109:  BCF    03.5
010A:  BCF    09.1
010B:  RETURN
.................... }//end lcd_write_dat() 
.................... //===========================================================================// 
.................... //--- lcd_init() ------------//////////////////////////////////////////////////  
.................... void lcd_init(void) 
.................... { 
....................    output_low(LCD_E);              // Let LCD E line low 
*
00CD:  BSF    03.5
00CE:  BCF    09.1
00CF:  BCF    03.5
00D0:  BCF    09.1
....................     
....................    lcd_write_cmd(0x38);            // LCD 16x2, 5x7, 8bits data 
00D1:  MOVLW  38
00D2:  MOVWF  38
00D3:  CALL   099
....................    delay_ms(15); 
00D4:  MOVLW  0F
00D5:  MOVWF  34
00D6:  CALL   0B9
....................    lcd_write_cmd(0x01);            // Clear LCD display 
00D7:  MOVLW  01
00D8:  MOVWF  38
00D9:  CALL   099
....................    delay_ms(10); 
00DA:  MOVLW  0A
00DB:  MOVWF  34
00DC:  CALL   0B9
....................    lcd_write_cmd(0x0C);            // Open display & current 
00DD:  MOVLW  0C
00DE:  MOVWF  38
00DF:  CALL   099
....................    delay_ms(10); 
00E0:  MOVLW  0A
00E1:  MOVWF  34
00E2:  CALL   0B9
....................    lcd_write_cmd(0x06);            // Window fixed 
00E3:  MOVLW  06
00E4:  MOVWF  38
00E5:  CALL   099
....................    delay_ms(10); 
00E6:  MOVLW  0A
00E7:  MOVWF  34
00E8:  CALL   0B9
00E9:  BCF    0A.3
00EA:  BCF    0A.4
00EB:  GOTO   201 (RETURN)
.................... }//end lcd_init() 
.................... //===========================================================================// 
.................... //--- lcd_display_char() ------------////////////////////////////////////////// 
.................... void lcd_display_char(int8 line, int8 pos, int8 ch) 
.................... { 
....................         int8 tmp; 
....................  
....................         line = (line==0) ? 0 : 1; 
....................         pos  = (pos >NCHAR_PER_LINE) ? NCHAR_PER_LINE : pos; 
....................  
....................         tmp = 0x80 + 0x40*line + pos; 
....................         lcd_write_cmd(tmp); 
....................         lcd_write_dat(ch); 
.................... }//end lcd_display_char() 
.................... //===========================================================================// 
.................... //--- lcd_display_str() ------------///////////////////////////////////////////  
.................... void lcd_display_str(int8 line, char str[]) 
.................... { 
....................      int8 i; 
....................  
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................             { 
....................                 lcd_display_char(line, i, ' '); 
....................                 } 
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................                 { 
....................                 if(str[i] == '\0') break; 
....................                 lcd_display_char(line, i, str[i]); 
....................                 } 
.................... }//end lcd_display_str() 
.................... //===========================================================================// 
.................... //--- lcd_gotoxy(coluna linha) -----///////////////////////////////////////////  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y != 1) 
*
010C:  DECFSZ 35,W
010D:  GOTO   10F
010E:  GOTO   112
....................       address = 0x40; 
010F:  MOVLW  40
0110:  MOVWF  36
0111:  GOTO   113
....................    else 
....................       address = 0x00; 
0112:  CLRF   36
....................       
....................    address += (x-1);    
0113:  MOVLW  01
0114:  SUBWF  34,W
0115:  ADDWF  36,F
....................    lcd_write_cmd(0x80|address); 
0116:  MOVF   36,W
0117:  IORLW  80
0118:  MOVWF  37
0119:  MOVWF  38
011A:  CALL   099
011B:  RETURN
.................... } 
.................... //===========================================================================// 
....................  
....................  
.................... int1 tempo_finalizado = 0; 
.................... int1 em_processo = 0; 
.................... const int8 CONTADOR_TEMPO_INIT = 125; 
.................... const int16 VALOR_ALCOOL_PERMITIDO = 700; 
.................... int8 contador_tempo = CONTADOR_TEMPO_INIT; 
.................... int16 leitura_potenciometro = 0, VP = VALOR_ALCOOL_PERMITIDO; 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(void)  
.................... { 
....................     set_timer0(get_timer0() + 6); 
*
004F:  MOVF   01,W
0050:  ADDLW  06
0051:  MOVWF  40
0052:  MOVF   40,W
0053:  MOVWF  01
....................     contador_tempo--; 
0054:  DECFSZ 2D,F
....................     if (contador_tempo == 0) 
0055:  GOTO   059
....................     { 
....................         contador_tempo = CONTADOR_TEMPO_INIT; 
0056:  MOVLW  7D
0057:  MOVWF  2D
....................         tempo_finalizado = 1; 
0058:  BSF    2C.0
....................     } 
0059:  BCF    0B.2
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
01D5:  MOVF   03,W
01D6:  ANDLW  1F
01D7:  MOVWF  03
01D8:  MOVLW  FF
01D9:  MOVWF  2B
01DA:  BCF    2C.0
01DB:  BCF    2C.1
01DC:  MOVLW  7D
01DD:  MOVWF  2D
01DE:  CLRF   2F
01DF:  CLRF   2E
01E0:  MOVLW  02
01E1:  MOVWF  31
01E2:  MOVLW  BC
01E3:  MOVWF  30
01E4:  CLRF   33
01E5:  CLRF   32
01E6:  BSF    03.5
01E7:  BSF    1F.0
01E8:  BSF    1F.1
01E9:  BSF    1F.2
01EA:  BCF    1F.3
01EB:  MOVLW  07
01EC:  MOVWF  1C
01ED:  BCF    03.7
.................... { 
....................     setup_adc_ports(AN0_AN1_AN3); 
01EE:  BCF    1F.0
01EF:  BCF    1F.1
01F0:  BSF    1F.2
01F1:  BCF    1F.3
....................     setup_adc(ADC_CLOCK_INTERNAL); 
01F2:  BCF    1F.6
01F3:  BCF    03.5
01F4:  BSF    1F.6
01F5:  BSF    1F.7
01F6:  BSF    03.5
01F7:  BSF    1F.7
01F8:  BCF    03.5
01F9:  BSF    1F.0
....................     setup_timer_0(RTCC_INTERNAL | RTCC_DIV_16 | RTCC_8_BIT);  
01FA:  BSF    03.5
01FB:  MOVF   01,W
01FC:  ANDLW  C0
01FD:  IORLW  03
01FE:  MOVWF  01
....................  
....................     lcd_init(); 
01FF:  BCF    03.5
0200:  GOTO   0CD
....................     
....................      
....................     printf(lcd_write_dat, "AM:"); 
0201:  MOVLW  41
0202:  MOVWF  3D
0203:  CALL   0EC
0204:  MOVLW  4D
0205:  MOVWF  3D
0206:  CALL   0EC
0207:  MOVLW  3A
0208:  MOVWF  3D
0209:  CALL   0EC
....................     lcd_gotoxy(10,1); 
020A:  MOVLW  0A
020B:  MOVWF  34
020C:  MOVLW  01
020D:  MOVWF  35
020E:  CALL   10C
....................      
....................     printf(lcd_write_dat, "AP:"); 
020F:  MOVLW  41
0210:  MOVWF  3D
0211:  CALL   0EC
0212:  MOVLW  50
0213:  MOVWF  3D
0214:  CALL   0EC
0215:  MOVLW  3A
0216:  MOVWF  3D
0217:  CALL   0EC
....................     lcd_gotoxy(1,2); 
0218:  MOVLW  01
0219:  MOVWF  34
021A:  MOVLW  02
021B:  MOVWF  35
021C:  CALL   10C
....................      
....................     printf(lcd_write_dat, "P:OF"); 
021D:  MOVLW  5D
021E:  BSF    03.6
021F:  MOVWF  0D
0220:  MOVLW  00
0221:  MOVWF  0F
0222:  BCF    03.6
0223:  CALL   11C
....................     lcd_gotoxy(7,2); 
0224:  MOVLW  07
0225:  MOVWF  34
0226:  MOVLW  02
0227:  MOVWF  35
0228:  CALL   10C
....................      
....................     printf(lcd_write_dat, "VU:OF"); 
0229:  MOVLW  60
022A:  BSF    03.6
022B:  MOVWF  0D
022C:  MOVLW  00
022D:  MOVWF  0F
022E:  BCF    03.6
022F:  CALL   11C
....................     lcd_gotoxy(13,2); 
0230:  MOVLW  0D
0231:  MOVWF  34
0232:  MOVLW  02
0233:  MOVWF  35
0234:  CALL   10C
....................      
....................     enable_interrupts(INT_TIMER0); 
0235:  BSF    0B.5
....................     enable_interrupts(GLOBAL); 
0236:  MOVLW  C0
0237:  IORWF  0B,F
....................  
....................  
....................     while (TRUE) 
....................     { 
....................         if (tempo_finalizado) 
0238:  BTFSS  2C.0
0239:  GOTO   267
....................         { 
....................             tempo_finalizado = 0; 
023A:  BCF    2C.0
....................             set_adc_channel(1); 
023B:  MOVLW  08
023C:  MOVWF  78
023D:  MOVF   1F,W
023E:  ANDLW  C7
023F:  IORWF  78,W
0240:  MOVWF  1F
....................             delay_us(40); 
0241:  MOVLW  1A
0242:  MOVWF  77
0243:  DECFSZ 77,F
0244:  GOTO   243
0245:  NOP
....................             leitura_potenciometro = read_adc(); 
0246:  BSF    1F.2
0247:  BTFSC  1F.2
0248:  GOTO   247
0249:  BSF    03.5
024A:  MOVF   1E,W
024B:  BCF    03.5
024C:  MOVWF  2E
024D:  MOVF   1E,W
024E:  MOVWF  2F
....................             lcd_gotoxy(4, 1); 
024F:  MOVLW  04
0250:  MOVWF  34
0251:  MOVLW  01
0252:  MOVWF  35
0253:  CALL   10C
....................             printf(lcd_write_dat, "%04lu", leitura_potenciometro); 
0254:  MOVLW  09
0255:  MOVWF  04
0256:  MOVF   2F,W
0257:  MOVWF  35
0258:  MOVF   2E,W
0259:  MOVWF  34
025A:  CALL   172
....................             lcd_gotoxy(13, 1); 
025B:  MOVLW  0D
025C:  MOVWF  34
025D:  MOVLW  01
025E:  MOVWF  35
025F:  CALL   10C
....................             printf(lcd_write_dat, "%04lu", VP); 
0260:  MOVLW  09
0261:  MOVWF  04
0262:  MOVF   31,W
0263:  MOVWF  35
0264:  MOVF   30,W
0265:  MOVWF  34
0266:  CALL   172
....................  
....................         } 
....................  
....................         if (input(liga) == 0) 
0267:  MOVLW  F3
0268:  BSF    03.5
0269:  MOVWF  06
026A:  BCF    03.5
026B:  BTFSC  06.0
026C:  GOTO   27B
....................         { 
....................             em_processo = 1; 
026D:  BSF    2C.1
....................             lcd_gotoxy(4, 2); 
026E:  MOVLW  04
026F:  MOVWF  34
0270:  MOVLW  02
0271:  MOVWF  35
0272:  CALL   10C
....................             printf(lcd_write_dat, "N"); 
0273:  MOVLW  4E
0274:  MOVWF  3D
0275:  CALL   0EC
....................             output_high(LEDL); 
0276:  MOVLW  F3
0277:  BSF    03.5
0278:  MOVWF  06
0279:  BCF    03.5
027A:  BSF    06.2
....................              
....................         } 
....................  
....................         if (input(desliga) == 0) 
027B:  MOVLW  F3
027C:  BSF    03.5
027D:  MOVWF  06
027E:  BCF    03.5
027F:  BTFSC  06.1
0280:  GOTO   2A0
....................         { 
....................             em_processo = 0; 
0281:  BCF    2C.1
....................             output_low(buzzer); 
0282:  MOVLW  DF
0283:  BSF    03.5
0284:  MOVWF  05
0285:  BCF    03.5
0286:  BCF    05.5
....................             output_low(LED); 
0287:  MOVLW  F3
0288:  BSF    03.5
0289:  MOVWF  06
028A:  BCF    03.5
028B:  BCF    06.3
....................             output_low(LEDL); 
028C:  BSF    03.5
028D:  MOVWF  06
028E:  BCF    03.5
028F:  BCF    06.2
....................             lcd_gotoxy(4, 2); 
0290:  MOVLW  04
0291:  MOVWF  34
0292:  MOVLW  02
0293:  MOVWF  35
0294:  CALL   10C
....................             printf(lcd_write_dat, "F"); 
0295:  MOVLW  46
0296:  MOVWF  3D
0297:  CALL   0EC
....................  
....................             lcd_gotoxy(11, 2); 
0298:  MOVLW  0B
0299:  MOVWF  34
029A:  MOVLW  02
029B:  MOVWF  35
029C:  CALL   10C
....................             printf(lcd_write_dat, "F"); 
029D:  MOVLW  46
029E:  MOVWF  3D
029F:  CALL   0EC
....................         } 
....................  
....................         if (em_processo) 
02A0:  BTFSS  2C.1
02A1:  GOTO   2D1
....................         { 
....................             if(leitura_potenciometro >= VP) 
02A2:  MOVF   31,W
02A3:  SUBWF  2F,W
02A4:  BTFSS  03.0
02A5:  GOTO   2BF
02A6:  BTFSS  03.2
02A7:  GOTO   2AC
02A8:  MOVF   30,W
02A9:  SUBWF  2E,W
02AA:  BTFSS  03.0
02AB:  GOTO   2BF
....................             { 
....................                output_high(buzzer); 
02AC:  MOVLW  DF
02AD:  BSF    03.5
02AE:  MOVWF  05
02AF:  BCF    03.5
02B0:  BSF    05.5
....................                output_high(LED); 
02B1:  MOVLW  F3
02B2:  BSF    03.5
02B3:  MOVWF  06
02B4:  BCF    03.5
02B5:  BSF    06.3
....................                lcd_gotoxy(11, 2); 
02B6:  MOVLW  0B
02B7:  MOVWF  34
02B8:  MOVLW  02
02B9:  MOVWF  35
02BA:  CALL   10C
....................                printf(lcd_write_dat, "N"); 
02BB:  MOVLW  4E
02BC:  MOVWF  3D
02BD:  CALL   0EC
....................             } 
02BE:  GOTO   2D1
....................             else 
....................             { 
....................                output_low(buzzer); 
02BF:  MOVLW  DF
02C0:  BSF    03.5
02C1:  MOVWF  05
02C2:  BCF    03.5
02C3:  BCF    05.5
....................                output_low(LED); 
02C4:  MOVLW  F3
02C5:  BSF    03.5
02C6:  MOVWF  06
02C7:  BCF    03.5
02C8:  BCF    06.3
....................                lcd_gotoxy(11, 2); 
02C9:  MOVLW  0B
02CA:  MOVWF  34
02CB:  MOVLW  02
02CC:  MOVWF  35
02CD:  CALL   10C
....................                printf(lcd_write_dat, "F"); 
02CE:  MOVLW  46
02CF:  MOVWF  3D
02D0:  CALL   0EC
....................             } 
....................         } 
02D1:  GOTO   238
....................     } 
.................... } 
....................  
02D2:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
